/*
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`get_store_payout`]
#[derive(Clone, Debug)]
pub struct GetStorePayoutParams {
    /// The store ID
    pub store_id: String,
    /// The ID of the payout
    pub payout_id: String,
}

/// struct for passing parameters to the method [`payouts_create_payout_through_store`]
#[derive(Clone, Debug)]
pub struct PayoutsCreatePayoutThroughStoreParams {
    /// The store ID
    pub store_id: String,
    pub create_payout_through_store_request: models::CreatePayoutThroughStoreRequest,
}

/// struct for passing parameters to the method [`pull_payments_approve_payout`]
#[derive(Clone, Debug)]
pub struct PullPaymentsApprovePayoutParams {
    /// The store ID
    pub store_id: String,
    /// The ID of the payout
    pub payout_id: String,
    pub pull_payments_approve_payout_request: Option<models::PullPaymentsApprovePayoutRequest>,
}

/// struct for passing parameters to the method [`pull_payments_cancel_payout`]
#[derive(Clone, Debug)]
pub struct PullPaymentsCancelPayoutParams {
    /// The store ID
    pub store_id: String,
    /// The ID of the payout
    pub payout_id: String,
}

/// struct for passing parameters to the method [`pull_payments_get_store_payouts`]
#[derive(Clone, Debug)]
pub struct PullPaymentsGetStorePayoutsParams {
    /// The store ID
    pub store_id: String,
    /// Whether this should list cancelled payouts
    pub include_cancelled: Option<bool>,
}

/// struct for passing parameters to the method [`pull_payments_mark_payout`]
#[derive(Clone, Debug)]
pub struct PullPaymentsMarkPayoutParams {
    /// The store ID
    pub store_id: String,
    /// The ID of the payout
    pub payout_id: String,
    pub pull_payments_mark_payout_request: Option<models::PullPaymentsMarkPayoutRequest>,
}

/// struct for passing parameters to the method [`pull_payments_mark_payout_paid`]
#[derive(Clone, Debug)]
pub struct PullPaymentsMarkPayoutPaidParams {
    /// The store ID
    pub store_id: String,
    /// The ID of the payout
    pub payout_id: String,
}

/// struct for typed errors of method [`get_store_payout`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStorePayoutError {
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payouts_create_payout_through_store`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PayoutsCreatePayoutThroughStoreError {
    Status404(),
    Status422(Vec<models::ValidationProblemDetailsInner>),
    Status400(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pull_payments_approve_payout`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PullPaymentsApprovePayoutError {
    Status422(Vec<models::ValidationProblemDetailsInner>),
    Status400(models::ProblemDetails),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pull_payments_cancel_payout`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PullPaymentsCancelPayoutError {
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pull_payments_get_store_payouts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PullPaymentsGetStorePayoutsError {
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pull_payments_mark_payout`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PullPaymentsMarkPayoutError {
    Status422(Vec<models::ValidationProblemDetailsInner>),
    Status400(models::ProblemDetails),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pull_payments_mark_payout_paid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PullPaymentsMarkPayoutPaidError {
    Status422(Vec<models::ValidationProblemDetailsInner>),
    Status400(models::ProblemDetails),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// Get payout
pub async fn get_store_payout(
    configuration: &configuration::Configuration,
    params: GetStorePayoutParams,
) -> Result<models::PayoutData, Error<GetStorePayoutError>> {
    let uri_str = format!(
        "{}/api/v1/stores/{storeId}/payouts/{payoutId}",
        configuration.base_path,
        storeId = crate::apis::urlencode(params.store_id),
        payoutId = crate::apis::urlencode(params.payout_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PayoutData`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PayoutData`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetStorePayoutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create a new payout
pub async fn payouts_create_payout_through_store(
    configuration: &configuration::Configuration,
    params: PayoutsCreatePayoutThroughStoreParams,
) -> Result<models::PayoutData, Error<PayoutsCreatePayoutThroughStoreError>> {
    let uri_str = format!(
        "{}/api/v1/stores/{storeId}/payouts",
        configuration.base_path,
        storeId = crate::apis::urlencode(params.store_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&params.create_payout_through_store_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PayoutData`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PayoutData`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PayoutsCreatePayoutThroughStoreError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Approve a payout
pub async fn pull_payments_approve_payout(
    configuration: &configuration::Configuration,
    params: PullPaymentsApprovePayoutParams,
) -> Result<models::PayoutData, Error<PullPaymentsApprovePayoutError>> {
    let uri_str = format!(
        "{}/api/v1/stores/{storeId}/payouts/{payoutId}",
        configuration.base_path,
        storeId = crate::apis::urlencode(params.store_id),
        payoutId = crate::apis::urlencode(params.payout_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&params.pull_payments_approve_payout_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PayoutData`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PayoutData`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PullPaymentsApprovePayoutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Cancel the payout
pub async fn pull_payments_cancel_payout(
    configuration: &configuration::Configuration,
    params: PullPaymentsCancelPayoutParams,
) -> Result<(), Error<PullPaymentsCancelPayoutError>> {
    let uri_str = format!(
        "{}/api/v1/stores/{storeId}/payouts/{payoutId}",
        configuration.base_path,
        storeId = crate::apis::urlencode(params.store_id),
        payoutId = crate::apis::urlencode(params.payout_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PullPaymentsCancelPayoutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get payouts
pub async fn pull_payments_get_store_payouts(
    configuration: &configuration::Configuration,
    params: PullPaymentsGetStorePayoutsParams,
) -> Result<Vec<models::PayoutData>, Error<PullPaymentsGetStorePayoutsError>> {
    let uri_str = format!(
        "{}/api/v1/stores/{storeId}/payouts",
        configuration.base_path,
        storeId = crate::apis::urlencode(params.store_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.include_cancelled {
        req_builder = req_builder.query(&[("includeCancelled", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::PayoutData&gt;`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::PayoutData&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PullPaymentsGetStorePayoutsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Mark a payout with a state
pub async fn pull_payments_mark_payout(
    configuration: &configuration::Configuration,
    params: PullPaymentsMarkPayoutParams,
) -> Result<(), Error<PullPaymentsMarkPayoutError>> {
    let uri_str = format!(
        "{}/api/v1/stores/{storeId}/payouts/{payoutId}/mark",
        configuration.base_path,
        storeId = crate::apis::urlencode(params.store_id),
        payoutId = crate::apis::urlencode(params.payout_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&params.pull_payments_mark_payout_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PullPaymentsMarkPayoutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Mark a payout as paid
pub async fn pull_payments_mark_payout_paid(
    configuration: &configuration::Configuration,
    params: PullPaymentsMarkPayoutPaidParams,
) -> Result<(), Error<PullPaymentsMarkPayoutPaidError>> {
    let uri_str = format!(
        "{}/api/v1/stores/{storeId}/payouts/{payoutId}/mark-paid",
        configuration.base_path,
        storeId = crate::apis::urlencode(params.store_id),
        payoutId = crate::apis::urlencode(params.payout_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PullPaymentsMarkPayoutPaidError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
