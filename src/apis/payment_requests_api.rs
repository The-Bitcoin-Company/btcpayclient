/*
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`payment_requests_archive_payment_request`]
#[derive(Clone, Debug)]
pub struct PaymentRequestsArchivePaymentRequestParams {
    /// The store ID
    pub store_id: String,
    /// The payment request to remove
    pub payment_request_id: String,
}

/// struct for passing parameters to the method [`payment_requests_create_payment_request`]
#[derive(Clone, Debug)]
pub struct PaymentRequestsCreatePaymentRequestParams {
    /// The store ID
    pub store_id: String,
    pub payment_request_base_data: models::PaymentRequestBaseData,
}

/// struct for passing parameters to the method [`payment_requests_get_payment_request`]
#[derive(Clone, Debug)]
pub struct PaymentRequestsGetPaymentRequestParams {
    /// The store ID
    pub store_id: String,
    /// The payment request to fetch
    pub payment_request_id: String,
}

/// struct for passing parameters to the method [`payment_requests_get_payment_requests`]
#[derive(Clone, Debug)]
pub struct PaymentRequestsGetPaymentRequestsParams {
    /// The store ID
    pub store_id: String,
}

/// struct for passing parameters to the method [`payment_requests_pay`]
#[derive(Clone, Debug)]
pub struct PaymentRequestsPayParams {
    /// The store ID
    pub store_id: String,
    /// The payment request to create
    pub payment_request_id: String,
    /// Invoice creation request
    pub payment_requests_pay_request: Option<models::PaymentRequestsPayRequest>,
}

/// struct for passing parameters to the method [`payment_requests_update_payment_request`]
#[derive(Clone, Debug)]
pub struct PaymentRequestsUpdatePaymentRequestParams {
    /// The store ID
    pub store_id: String,
    /// The payment request to update
    pub payment_request_id: String,
    pub payment_request_base_data: models::PaymentRequestBaseData,
}

/// struct for typed errors of method [`payment_requests_archive_payment_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentRequestsArchivePaymentRequestError {
    Status400(Vec<models::ValidationProblemDetailsInner>),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_requests_create_payment_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentRequestsCreatePaymentRequestError {
    Status400(Vec<models::ValidationProblemDetailsInner>),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_requests_get_payment_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentRequestsGetPaymentRequestError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_requests_get_payment_requests`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentRequestsGetPaymentRequestsError {
    Status401(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_requests_pay`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentRequestsPayError {
    Status422(Vec<models::ValidationProblemDetailsInner>),
    Status400(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_requests_update_payment_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentRequestsUpdatePaymentRequestError {
    Status400(Vec<models::ValidationProblemDetailsInner>),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// Archives the specified payment request.
pub async fn payment_requests_archive_payment_request(
    configuration: &configuration::Configuration,
    params: PaymentRequestsArchivePaymentRequestParams,
) -> Result<(), Error<PaymentRequestsArchivePaymentRequestError>> {
    let uri_str = format!(
        "{}/api/v1/stores/{storeId}/payment-requests/{paymentRequestId}",
        configuration.base_path,
        storeId = crate::apis::urlencode(params.store_id),
        paymentRequestId = crate::apis::urlencode(params.payment_request_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PaymentRequestsArchivePaymentRequestError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create a new payment request
pub async fn payment_requests_create_payment_request(
    configuration: &configuration::Configuration,
    params: PaymentRequestsCreatePaymentRequestParams,
) -> Result<models::PaymentRequestData, Error<PaymentRequestsCreatePaymentRequestError>> {
    let uri_str = format!(
        "{}/api/v1/stores/{storeId}/payment-requests",
        configuration.base_path,
        storeId = crate::apis::urlencode(params.store_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&params.payment_request_base_data);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PaymentRequestData`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PaymentRequestData`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PaymentRequestsCreatePaymentRequestError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// View information about the specified payment request
pub async fn payment_requests_get_payment_request(
    configuration: &configuration::Configuration,
    params: PaymentRequestsGetPaymentRequestParams,
) -> Result<models::PaymentRequestData, Error<PaymentRequestsGetPaymentRequestError>> {
    let uri_str = format!(
        "{}/api/v1/stores/{storeId}/payment-requests/{paymentRequestId}",
        configuration.base_path,
        storeId = crate::apis::urlencode(params.store_id),
        paymentRequestId = crate::apis::urlencode(params.payment_request_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PaymentRequestData`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PaymentRequestData`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PaymentRequestsGetPaymentRequestError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// View information about the existing payment requests
pub async fn payment_requests_get_payment_requests(
    configuration: &configuration::Configuration,
    params: PaymentRequestsGetPaymentRequestsParams,
) -> Result<Vec<models::PaymentRequestData>, Error<PaymentRequestsGetPaymentRequestsError>> {
    let uri_str = format!(
        "{}/api/v1/stores/{storeId}/payment-requests",
        configuration.base_path,
        storeId = crate::apis::urlencode(params.store_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::PaymentRequestData&gt;`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::PaymentRequestData&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PaymentRequestsGetPaymentRequestsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create a new invoice for the payment request, or reuse an existing one
pub async fn payment_requests_pay(
    configuration: &configuration::Configuration,
    params: PaymentRequestsPayParams,
) -> Result<models::InvoiceData, Error<PaymentRequestsPayError>> {
    let uri_str = format!(
        "{}/api/v1/stores/{storeId}/payment-requests/{paymentRequestId}/pay",
        configuration.base_path,
        storeId = crate::apis::urlencode(params.store_id),
        paymentRequestId = crate::apis::urlencode(params.payment_request_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&params.payment_requests_pay_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::InvoiceData`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::InvoiceData`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PaymentRequestsPayError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Update a payment request
pub async fn payment_requests_update_payment_request(
    configuration: &configuration::Configuration,
    params: PaymentRequestsUpdatePaymentRequestParams,
) -> Result<models::PaymentRequestData, Error<PaymentRequestsUpdatePaymentRequestError>> {
    let uri_str = format!(
        "{}/api/v1/stores/{storeId}/payment-requests/{paymentRequestId}",
        configuration.base_path,
        storeId = crate::apis::urlencode(params.store_id),
        paymentRequestId = crate::apis::urlencode(params.payment_request_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&params.payment_request_base_data);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PaymentRequestData`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PaymentRequestData`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PaymentRequestsUpdatePaymentRequestError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
