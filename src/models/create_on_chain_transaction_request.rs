/*
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateOnChainTransactionRequest {
    /// What and where to send money
    #[serde(rename = "destinations", skip_serializing_if = "Option::is_none")]
    pub destinations: Option<Vec<models::CreateOnChainTransactionRequestDestination>>,
    /// Transaction fee.
    #[serde(rename = "feerate", skip_serializing_if = "Option::is_none")]
    pub feerate: Option<f64>,
    /// Whether to attempt to do a BIP78 payjoin if one of the destinations is a BIP21 with payjoin enabled
    #[serde(
        rename = "proceedWithPayjoin",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub proceed_with_payjoin: Option<Option<bool>>,
    /// Whether to broadcast the transaction after creating it or to simply return the transaction in hex format.
    #[serde(
        rename = "proceedWithBroadcast",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub proceed_with_broadcast: Option<Option<bool>>,
    /// Whether to send all the spent coins to the destinations (THIS CAN COST YOU SIGNIFICANT AMOUNTS OF MONEY, LEAVE FALSE UNLESS YOU KNOW WHAT YOU ARE DOING).
    #[serde(
        rename = "noChange",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub no_change: Option<Option<bool>>,
    /// Whether to enable RBF for the transaction. Leave blank to have it random (beneficial to privacy)
    #[serde(
        rename = "rbf",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub rbf: Option<Option<bool>>,
    /// Whether to exclude unconfirmed UTXOs from the transaction.
    #[serde(
        rename = "excludeUnconfirmed",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub exclude_unconfirmed: Option<Option<bool>>,
    /// Restrict the creation of the transactions from the outpoints provided ONLY (coin selection)
    #[serde(
        rename = "selectedInputs",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub selected_inputs: Option<Option<Vec<String>>>,
}

impl CreateOnChainTransactionRequest {
    pub fn new() -> CreateOnChainTransactionRequest {
        CreateOnChainTransactionRequest {
            destinations: None,
            feerate: None,
            proceed_with_payjoin: None,
            proceed_with_broadcast: None,
            no_change: None,
            rbf: None,
            exclude_unconfirmed: None,
            selected_inputs: None,
        }
    }
}
