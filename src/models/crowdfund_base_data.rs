/*
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CrowdfundBaseData {
    /// Id of the app
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name given to the app when it was created
    #[serde(rename = "appName", skip_serializing_if = "Option::is_none")]
    pub app_name: Option<String>,
    /// Id of the store to which the app belongs
    #[serde(rename = "storeId", skip_serializing_if = "Option::is_none")]
    pub store_id: Option<String>,
    /// UNIX timestamp for when the app was created
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<i32>,
    /// Type of the app which was created
    #[serde(rename = "appType", skip_serializing_if = "Option::is_none")]
    pub app_type: Option<String>,
    /// If true, the app does not appear in the apps list by default.
    #[serde(
        rename = "archived",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub archived: Option<Option<bool>>,
    /// Display title of the app
    #[serde(
        rename = "title",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub title: Option<Option<String>>,
    /// App description
    #[serde(
        rename = "description",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<Option<String>>,
    /// Whether the app is enabled to be viewed by everyone
    #[serde(
        rename = "enabled",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub enabled: Option<Option<bool>>,
    /// Whether contributions over the set target amount are allowed
    #[serde(
        rename = "enforceTargetAmount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub enforce_target_amount: Option<Option<bool>>,
    /// UNIX timestamp for crowdfund start time (https://www.unixtimestamp.com/)
    #[serde(
        rename = "startDate",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub start_date: Option<Option<f64>>,
    /// UNIX timestamp for crowdfund end time (https://www.unixtimestamp.com/)
    #[serde(
        rename = "endDate",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub end_date: Option<Option<f64>>,
    /// Target currency for the crowdfund
    #[serde(
        rename = "targetCurrency",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub target_currency: Option<Option<String>>,
    /// Target amount for the crowdfund
    #[serde(
        rename = "targetAmount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub target_amount: Option<Option<f64>>,
    /// URL for image used as a cover image for the app
    #[serde(
        rename = "mainImageUrl",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub main_image_url: Option<Option<String>>,
    /// Callback notification url to POST to once when invoice is paid for and once when there are enough blockchain confirmations
    #[serde(
        rename = "notificationUrl",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub notification_url: Option<Option<String>>,
    /// Tagline for the app displayed to user
    #[serde(
        rename = "tagline",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub tagline: Option<Option<String>>,
    /// Whether Disqus is enabled for the app
    #[serde(
        rename = "disqusEnabled",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub disqus_enabled: Option<Option<bool>>,
    /// Disqus shortname to used for the app
    #[serde(
        rename = "disqusShortname",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub disqus_shortname: Option<Option<String>>,
    /// Whether sounds on new contributions are enabled
    #[serde(
        rename = "soundsEnabled",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub sounds_enabled: Option<Option<bool>>,
    /// Whether background animations on new contributions are enabled
    #[serde(
        rename = "animationsEnabled",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub animations_enabled: Option<Option<bool>>,
    /// Contribution goal reset frequency amount
    #[serde(
        rename = "resetEveryAmount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub reset_every_amount: Option<Option<f64>>,
    /// Contribution goal reset frequency
    #[serde(
        rename = "resetEvery",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub reset_every: Option<Option<String>>,
    /// Whether perk values are displayed
    #[serde(
        rename = "displayPerksValue",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub display_perks_value: Option<Option<bool>>,
    /// Whether perks are sorted by popularity
    #[serde(
        rename = "sortPerksByPopularity",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub sort_perks_by_popularity: Option<Option<bool>>,
    /// Array of custom sounds which can be used on new contributions
    #[serde(
        rename = "sounds",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub sounds: Option<Option<Vec<String>>>,
    /// Array of custom HEX colors which can be used for background animations on new contributions
    #[serde(
        rename = "animationColors",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub animation_colors: Option<Option<Vec<String>>>,
    /// Used for SEO, the [HTML Lang](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang) of the page
    #[serde(
        rename = "htmlLang",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub html_lang: Option<Option<String>>,
    /// Used for SEO, the [Meta tags](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta) of the page
    #[serde(
        rename = "htmlMetaTags",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub html_meta_tags: Option<Option<String>>,
    /// Form ID to request customer data
    #[serde(
        rename = "formId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub form_id: Option<Option<String>>,
}

impl CrowdfundBaseData {
    pub fn new() -> CrowdfundBaseData {
        CrowdfundBaseData {
            id: None,
            app_name: None,
            store_id: None,
            created: None,
            app_type: None,
            archived: None,
            title: None,
            description: None,
            enabled: None,
            enforce_target_amount: None,
            start_date: None,
            end_date: None,
            target_currency: None,
            target_amount: None,
            main_image_url: None,
            notification_url: None,
            tagline: None,
            disqus_enabled: None,
            disqus_shortname: None,
            sounds_enabled: None,
            animations_enabled: None,
            reset_every_amount: None,
            reset_every: None,
            display_perks_value: None,
            sort_perks_by_popularity: None,
            sounds: None,
            animation_colors: None,
            html_lang: None,
            html_meta_tags: None,
            form_id: None,
        }
    }
}
