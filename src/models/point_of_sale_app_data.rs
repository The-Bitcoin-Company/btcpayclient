/*
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PointOfSaleAppData {
    /// Id of the app
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name given to the app when it was created
    #[serde(rename = "appName", skip_serializing_if = "Option::is_none")]
    pub app_name: Option<String>,
    /// Id of the store to which the app belongs
    #[serde(rename = "storeId", skip_serializing_if = "Option::is_none")]
    pub store_id: Option<String>,
    /// UNIX timestamp for when the app was created
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<i32>,
    /// Type of the app which was created
    #[serde(rename = "appType", skip_serializing_if = "Option::is_none")]
    pub app_type: Option<String>,
    /// If true, the app does not appear in the apps list by default.
    #[serde(
        rename = "archived",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub archived: Option<Option<bool>>,
    /// Display title of the app
    #[serde(
        rename = "title",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub title: Option<Option<String>>,
    /// App description
    #[serde(
        rename = "description",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<Option<String>>,
    /// App view type (e.g., static, cart, etc...)
    #[serde(
        rename = "defaultView",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_view: Option<Option<DefaultView>>,
    /// Display item selection for keypad
    #[serde(
        rename = "showItems",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub show_items: Option<Option<bool>>,
    /// Whether the option to enter a custom amount is shown
    #[serde(
        rename = "showCustomAmount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub show_custom_amount: Option<Option<bool>>,
    /// Whether the option to enter a discount is shown
    #[serde(
        rename = "showDiscount",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub show_discount: Option<Option<bool>>,
    /// Display the search bar
    #[serde(
        rename = "showSearch",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub show_search: Option<Option<bool>>,
    /// Display the list of categories
    #[serde(
        rename = "showCategories",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub show_categories: Option<Option<bool>>,
    /// Whether the option to enter a tip is shown
    #[serde(
        rename = "enableTips",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_tips: Option<Option<bool>>,
    /// Currency used for the app
    #[serde(
        rename = "currency",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub currency: Option<Option<String>>,
    /// Payment button text template for items with a set price
    #[serde(
        rename = "fixedAmountPayButtonText",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub fixed_amount_pay_button_text: Option<Option<String>>,
    /// Payment button text which appears for items which allow user to input a custom amount
    #[serde(
        rename = "customAmountPayButtonText",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub custom_amount_pay_button_text: Option<Option<String>>,
    /// Prompt which appears next to the tip amount field if tipping is enabled
    #[serde(
        rename = "tipText",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub tip_text: Option<Option<String>>,
    /// Array of predefined tip percentage amounts
    #[serde(
        rename = "customTipPercentages",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub custom_tip_percentages: Option<Option<Vec<f64>>>,
    /// Callback notification url to POST to once when invoice is paid for and once when there are enough blockchain confirmations
    #[serde(
        rename = "notificationUrl",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub notification_url: Option<Option<String>>,
    /// URL user is redirected to once invoice is paid
    #[serde(
        rename = "redirectUrl",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub redirect_url: Option<Option<String>>,
    /// Whether user is redirected to specified redirect URL automatically after the invoice is paid
    #[serde(
        rename = "redirectAutomatically",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub redirect_automatically: Option<Option<bool>>,
    /// Used for SEO, the [HTML Lang](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang) of the page
    #[serde(
        rename = "htmlLang",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub html_lang: Option<Option<String>>,
    /// Used for SEO, the [Meta tags](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta) of the page
    #[serde(
        rename = "htmlMetaTags",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub html_meta_tags: Option<Option<String>>,
    /// Form ID to request customer data
    #[serde(
        rename = "formId",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub form_id: Option<Option<String>>,
    /// JSON object of app items
    #[serde(rename = "items", skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<models::AppItem>>,
}

impl PointOfSaleAppData {
    pub fn new() -> PointOfSaleAppData {
        PointOfSaleAppData {
            id: None,
            app_name: None,
            store_id: None,
            created: None,
            app_type: None,
            archived: None,
            title: None,
            description: None,
            default_view: None,
            show_items: None,
            show_custom_amount: None,
            show_discount: None,
            show_search: None,
            show_categories: None,
            enable_tips: None,
            currency: None,
            fixed_amount_pay_button_text: None,
            custom_amount_pay_button_text: None,
            tip_text: None,
            custom_tip_percentages: None,
            notification_url: None,
            redirect_url: None,
            redirect_automatically: None,
            html_lang: None,
            html_meta_tags: None,
            form_id: None,
            items: None,
        }
    }
}
/// App view type (e.g., static, cart, etc...)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DefaultView {
    #[serde(rename = "Static")]
    Static,
    #[serde(rename = "Cart")]
    Cart,
    #[serde(rename = "Light")]
    Light,
    #[serde(rename = "Print")]
    Print,
}

impl Default for DefaultView {
    fn default() -> DefaultView {
        Self::Static
    }
}
