/*
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StoreBaseData {
    /// The name of the store
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The absolute url of the store
    #[serde(
        rename = "website",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub website: Option<Option<String>>,
    /// The support URI of the store, can contain the placeholders `{OrderId}` and `{InvoiceId}`. Can be any valid URI, such as a website, email, and nostr.
    #[serde(
        rename = "supportUrl",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub support_url: Option<Option<String>>,
    /// Absolute URL to a logo file or a reference to an uploaded file id with `fileid:ID`
    #[serde(
        rename = "logoUrl",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub logo_url: Option<Option<String>>,
    /// Absolute URL to CSS file to customize the public/customer-facing pages of the store. (Invoice, Payment Request, Pull Payment, etc.) or a reference to an uploaded file id with `fileid:ID`
    #[serde(
        rename = "cssUrl",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub css_url: Option<Option<String>>,
    /// Absolute URL to a sound file or a reference to an uploaded file id with `fileid:ID`
    #[serde(
        rename = "paymentSoundUrl",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub payment_sound_url: Option<Option<String>>,
    /// The brand color of the store in HEX format
    #[serde(
        rename = "brandColor",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub brand_color: Option<Option<String>>,
    /// Apply the brand color to the store's backend as well
    #[serde(
        rename = "applyBrandColorToBackend",
        skip_serializing_if = "Option::is_none"
    )]
    pub apply_brand_color_to_backend: Option<bool>,
    /// The default currency of the store
    #[serde(rename = "defaultCurrency", skip_serializing_if = "Option::is_none")]
    pub default_currency: Option<String>,
    /// Additional rates to track. The rates of those currencies, in addition to the default currency, will be recorded when a new invoice is created. The rates will then be accessible through reports.
    #[serde(
        rename = "additionalTrackedRates",
        skip_serializing_if = "Option::is_none"
    )]
    pub additional_tracked_rates: Option<Vec<String>>,
    /// The time after which an invoice is considered expired if not paid. The value will be rounded down to a minute.
    #[serde(rename = "invoiceExpiration", skip_serializing_if = "Option::is_none")]
    pub invoice_expiration: Option<models::TimeSpanSeconds>,
    /// The minimum expiry of BOLT11 invoices accepted for refunds by default. (in days)
    #[serde(
        rename = "refundBOLT11Expiration",
        skip_serializing_if = "Option::is_none"
    )]
    pub refund_bolt11_expiration: Option<models::TimeSpanDays>,
    /// The time left that will trigger the countdown timer on the checkout page to be shown. The value will be rounded down to a minute.
    #[serde(
        rename = "displayExpirationTimer",
        skip_serializing_if = "Option::is_none"
    )]
    pub display_expiration_timer: Option<models::TimeSpanSeconds>,
    /// The time after which an invoice which has been paid but not confirmed will be considered invalid. The value will be rounded down to a minute.
    #[serde(
        rename = "monitoringExpiration",
        skip_serializing_if = "Option::is_none"
    )]
    pub monitoring_expiration: Option<models::TimeSpanSeconds>,
    #[serde(rename = "speedPolicy", skip_serializing_if = "Option::is_none")]
    pub speed_policy: Option<models::SpeedPolicy>,
    /// The BOLT11 description of the lightning invoice in the checkout. You can use placeholders '{StoreName}', '{ItemDescription}' and '{OrderId}'.
    #[serde(
        rename = "lightningDescriptionTemplate",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub lightning_description_template: Option<Option<String>>,
    /// Consider an invoice fully paid, even if the payment is missing 'x' % of the full amount.
    #[serde(rename = "paymentTolerance", skip_serializing_if = "Option::is_none")]
    pub payment_tolerance: Option<f64>,
    /// If true, the store does not appear in the stores list by default.
    #[serde(rename = "archived", skip_serializing_if = "Option::is_none")]
    pub archived: Option<bool>,
    /// If true, then no authentication is needed to create invoices on this store.
    #[serde(
        rename = "anyoneCanCreateInvoice",
        skip_serializing_if = "Option::is_none"
    )]
    pub anyone_can_create_invoice: Option<bool>,
    /// Additional settings to customize the public receipt
    #[serde(
        rename = "receipt",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub receipt: Option<Option<models::ReceiptOptions>>,
    /// If true, lightning payment methods show amount in satoshi in the checkout page.
    #[serde(
        rename = "lightningAmountInSatoshi",
        skip_serializing_if = "Option::is_none"
    )]
    pub lightning_amount_in_satoshi: Option<bool>,
    /// Should private route hints be included in the lightning payment of the checkout page.
    #[serde(
        rename = "lightningPrivateRouteHints",
        skip_serializing_if = "Option::is_none"
    )]
    pub lightning_private_route_hints: Option<bool>,
    /// Unify on-chain and lightning payment URL.
    #[serde(
        rename = "onChainWithLnInvoiceFallback",
        skip_serializing_if = "Option::is_none"
    )]
    pub on_chain_with_ln_invoice_fallback: Option<bool>,
    /// After successfull payment, should the checkout page redirect the user automatically to the redirect URL of the invoice?
    #[serde(
        rename = "redirectAutomatically",
        skip_serializing_if = "Option::is_none"
    )]
    pub redirect_automatically: Option<bool>,
    #[serde(rename = "showRecommendedFee", skip_serializing_if = "Option::is_none")]
    pub show_recommended_fee: Option<bool>,
    /// The fee rate recommendation in the checkout page for the on-chain payment to be confirmed after 'x' blocks.
    #[serde(
        rename = "recommendedFeeBlockTarget",
        skip_serializing_if = "Option::is_none"
    )]
    pub recommended_fee_block_target: Option<i32>,
    /// The default language to use in the checkout page. (The different translations available are listed [here](https://github.com/btcpayserver/btcpayserver/tree/master/BTCPayServer/wwwroot/locales)
    #[serde(rename = "defaultLang", skip_serializing_if = "Option::is_none")]
    pub default_lang: Option<String>,
    /// The HTML title of the checkout page (when you over the tab in your browser)
    #[serde(
        rename = "htmlTitle",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub html_title: Option<Option<String>>,
    #[serde(rename = "networkFeeMode", skip_serializing_if = "Option::is_none")]
    pub network_fee_mode: Option<models::NetworkFeeMode>,
    /// If true, payjoin will be proposed in the checkout page if possible. ([More information](https://docs.btcpayserver.org/Payjoin/))
    #[serde(rename = "payJoinEnabled", skip_serializing_if = "Option::is_none")]
    pub pay_join_enabled: Option<bool>,
    /// If true, the language on the checkout page will adapt to the language defined by the user's browser settings
    #[serde(rename = "autoDetectLanguage", skip_serializing_if = "Option::is_none")]
    pub auto_detect_language: Option<bool>,
    /// If true, the \"Pay in wallet\" button will be shown on the checkout page (Checkout V2)
    #[serde(
        rename = "showPayInWalletButton",
        skip_serializing_if = "Option::is_none"
    )]
    pub show_pay_in_wallet_button: Option<bool>,
    /// If true, the store header will be shown on the checkout page (Checkout V2)
    #[serde(rename = "showStoreHeader", skip_serializing_if = "Option::is_none")]
    pub show_store_header: Option<bool>,
    /// If true, payments on the checkout page will be celebrated with confetti (Checkout V2)
    #[serde(rename = "celebratePayment", skip_serializing_if = "Option::is_none")]
    pub celebrate_payment: Option<bool>,
    /// If true, sounds on the checkout page will be enabled (Checkout V2)
    #[serde(rename = "playSoundOnPayment", skip_serializing_if = "Option::is_none")]
    pub play_sound_on_payment: Option<bool>,
    /// If true, payment methods are enabled individually upon user interaction in the invoice
    #[serde(rename = "lazyPaymentMethods", skip_serializing_if = "Option::is_none")]
    pub lazy_payment_methods: Option<bool>,
    /// Payment method IDs. Available payment method IDs for Bitcoin are:   - `\"BTC-CHAIN\"`: Onchain    -`\"BTC-LN\"`: Lightning    - `\"BTC-LNURL\"`: LNURL
    #[serde(
        rename = "defaultPaymentMethod",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_payment_method: Option<String>,
    /// The criteria required to activate specific payment methods.
    #[serde(
        rename = "paymentMethodCriteria",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub payment_method_criteria: Option<Option<Vec<models::PaymentMethodCriteriaData>>>,
}

impl StoreBaseData {
    pub fn new() -> StoreBaseData {
        StoreBaseData {
            name: None,
            website: None,
            support_url: None,
            logo_url: None,
            css_url: None,
            payment_sound_url: None,
            brand_color: None,
            apply_brand_color_to_backend: None,
            default_currency: None,
            additional_tracked_rates: None,
            invoice_expiration: None,
            refund_bolt11_expiration: None,
            display_expiration_timer: None,
            monitoring_expiration: None,
            speed_policy: None,
            lightning_description_template: None,
            payment_tolerance: None,
            archived: None,
            anyone_can_create_invoice: None,
            receipt: None,
            lightning_amount_in_satoshi: None,
            lightning_private_route_hints: None,
            on_chain_with_ln_invoice_fallback: None,
            redirect_automatically: None,
            show_recommended_fee: None,
            recommended_fee_block_target: None,
            default_lang: None,
            html_title: None,
            network_fee_mode: None,
            pay_join_enabled: None,
            auto_detect_language: None,
            show_pay_in_wallet_button: None,
            show_store_header: None,
            celebrate_payment: None,
            play_sound_on_payment: None,
            lazy_payment_methods: None,
            default_payment_method: None,
            payment_method_criteria: None,
        }
    }
}
